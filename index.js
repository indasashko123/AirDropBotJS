const {Telegraf, Scenes, session} = require('telegraf');
require('dotenv').config();
const sequelize = require('./DataBase/Database');
const {SubscriberModel,TicketModel,SponsorModel,LoteryModel,WinnerModel} = require('./DataBase/Models/Models');
const {MainBoard, StartButton } = require('./Keyboards/UserKeyboards');
const {MainAdmin} = require('./Keyboards/AdminKeyboard');
const StartSceneGenerator = require("./scenes/StartScene");



// Scenes
const startScene = new StartSceneGenerator();
const greatingScene = startScene.GetCreetingScene();
const sponsorsScene = startScene.GetSponsorScene();
const capchaScene = startScene.GetCapchaScene();
const passScene = startScene.GetPassScene();


// VARIABLES AND CONSTANT
const startDate = new Date(2022, 7, 14);
const bot = new Telegraf(process.env.TOKEN, {polling : true});




// db coonection
const conn = async() =>
{
    try
    {
        await sequelize.authenticate();
        await sequelize.sync();
    }
    catch (e)
    {
        console.log("ne podkluchilos", e);
    }
    try 
    {
        let sponsors = await SponsorModel.findAll();
        if (sponsors === null || sponsors.length === 0)
        {
            await SponsorModel.create(
            {
                link : "https://t.me/rs_luckytrader",
                chatId : "-1001452861940",
                name : "LackyTrader - —Ç—Ä–µ–π–¥–∏–Ω–≥, –¥–µ–Ω—å–≥–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
            });
        }
    }
    catch(err)
    {
        console.log(err);
    }
}
conn();

const stage = new Scenes.Stage([greatingScene,sponsorsScene,capchaScene, passScene]);
bot.use(session());
bot.use(stage.middleware());







bot.start(async (ctx)=>
{
    let _chatId = ctx.update.message.from.id;
    let referalChatID;
    let _referer;
    try 
    {
        referalChatID = ctx.update.message.text.split(' ')[1];
        _referer = await SubscriberModel.findOne(
            {
                where:
                {
                    chatId: referalChatID
                }
            });
            if (_referer === null)
            {
                referalChatID = 0;
            }
    }
    catch
    {
        referalChatID = 0;
    }
    const [_user, _created] = await SubscriberModel.findOrCreate
    ({
        where:
        {
            chatId: _chatId
        },
        defaults:
        {
            chatId: _chatId,
            passed : false,
            referals : 0,
            referal : referalChatID,
            tickets : 0
        }
    });
    if (_created)
    {
        if (referalChatID !==0)
        {
            _referer.referals++;
            await _referer.save();
        }
        ctx.scene.enter("greating");
    }
    else
    {
        await ctx.reply("üó£ –ü–æ—Å–ø–µ—à–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π, —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É.\n\n" +
            "‚ÑπÔ∏è–ë—é–¥–∂–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15.000$"
            , MainBoard);
    }
});

bot.use(async (ctx, next)=>
{
    try
    {
        const _chatId = ctx.message.chat.id;
        const [_currentUser, created] = await SubscriberModel.findOrCreate
                ({
                    where:
                    {
                        chatId: _chatId
            },
            defaults:
                                {
                chatId: _chatId,
                passed : false,
                referals : 0,
                referal : 0,
                tickets : 0
                                }
                            });
        if (_currentUser.passed == false)
        {
            ctx.scene.enter("greating");
        }
        else
        {
            next(ctx);
        }
    }
    catch
    {
        try
        {
            let messageId = ctx.update.callback_query.message.message_id;
            await ctx.deleteMessage(messageId);
        }     
        catch
        {
            
        }
        try
        {
            await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
        catch
        {
            
        }
    }
})


// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
bot.hears(MainBoard.reply_markup.keyboard[0][1], async ctx =>
    {
        try
        {
            let _chatId = ctx.message.chat.id;
            let _currentUser = await SubscriberModel.findOne
            ({
                where :
                {
                    chatId : _chatId
                }
            });
            await ctx.replyWithPhoto({source : "./img/4.jpg"});
            await ctx.reply
            (
                "‚ÑπÔ∏è–ü–æ–ª—É—á–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n\n"+
                `–ú–æ–∏ –±–∏–ª–µ—Ç—ã - ${_currentUser.tickets}\n\n`+
                "üìå–î–µ–ª–∏—Å—å —Å–≤–æ–µ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–∏–ª–µ—Ç –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n"+
                `–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n ${process.env.LINK}?start=${_currentUser.chatId} \n\n` +
                `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π - ${_currentUser.referals}`
            );
        }
         catch
         {

         }
    });

/// –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
bot.hears(MainBoard.reply_markup.keyboard[2][0], async ctx =>
    {
        await ctx.replyWithPhoto({source : "./img/2.jpg"});
        await ctx.reply("üì≤–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n\n"+

        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å: @AKR404");
    });

/// –ü—Ä–∞–≤–∏–ª–∞
bot.hears(MainBoard.reply_markup.keyboard[0][0], async ctx =>
    {
        await ctx.replyWithPhoto({source : "./img/1.jpg"});
        await ctx.reply(
            "1 . –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ  –º–µ—Ç–æ–¥—ã –Ω–∞–∫—Ä—É—Ç–æ–∫, –∞ —Ç–∞–∫ –∂–µ: –±–∏—Ä–∂–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—ç–π–∫–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–µ—Ä–≤–∏—Å—ã, –±–æ—Ç—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n\n"+
            "2 . –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–∫—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"+
            "3 . –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫, –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤ —Å–ª—É—á–∞–µ –æ–±–º–∞–Ω–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å –µ–º—É –ø—Ä–∏–∑.\n\n"+
            "4 . –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç 1 –Ω–æ–º–µ—Ä–Ω–æ–π –±–∏–ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç –µ–º—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–π–≥—Ä–∞—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑ –æ—Ç 1 –¥–æ 15000$.\n\n"+
            "5 . –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π, —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç 1 –Ω–æ–º–µ—Ä–Ω–æ–π –±–∏–ª–µ—Ç, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –±–æ–ª—å—à–µ –ø—Ä–∏–∑–æ–≤"
            );
    });
bot.hears(MainBoard.reply_markup.keyboard[1][1], async ctx =>
        {
            await ctx.replyWithPhoto({source: "./img/5.jpg"});
            await ctx.reply("–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ 500$?\n\n"+ 
                "–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ—è–≤–ª—è–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏, —Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏–∏, –æ–±—â–∞–π—Å—è –≤ —á–∞—Ç–∞—Ö, –∫–æ—Ä–æ—á–µ –±—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–ºüòâ\n\n"+    
                "–í —Ç–µ—á–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –º—ã –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –¥–∞—Ä–∏—Ç—å –∏–º  CRYPTOBOX —Å —Å—É–º–º–æ–π –¥–æ 500$üí•\n\n"+
                "‚ö°Ô∏è–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"+
                "‚Äì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–æ–≤.\n"+
                "‚Äì–û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–∞—Ö –±–µ–∑ –Ω–µ–≥–∞—Ç–∏–≤–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π.\n"+
                "‚Äì–ü—Ä–æ—è–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤.\n"+
                "‚Äì–ù–µ –≤—ã–∫–ª—é—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"+
                "üí∞–û—Ç —á–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –±–æ–Ω—É—Å:\n"+
                "‚Äì –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"+
                "‚Äì –ü–æ–∑–∏—Ç–∏–≤\n"+
                "‚Äì –í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö");
        });
/// –°—Ç–∞—Ç–∏c—Ç–∏–∫–∞
bot.hears(MainBoard.reply_markup.keyboard[1][0], async ctx =>
    {
        let userCount = await SubscriberModel.findAll();
        let ticketCount = await TicketModel.findAll();
        let activeUsers = await SubscriberModel.findAll
        ({
           where :
           {
              passed : true
           }
        });
        let date = new Date();
        var timeDiff = Math.abs(date.getTime() - startDate.getTime());
        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)); 
        await ctx.replyWithPhoto({source : "./img/3.jpg"});
        await ctx.reply(
            "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n" +
            `üë•–û–±—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${userCount.length} \n\n`+
            `üë§–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${activeUsers.length}\n\n` +
            `üéü–í—ã–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤:  ${ticketCount.length}\n\n ` +
            `üóì–î–Ω–µ–π –ø—Ä–æ–µ–∫—Ç—É: ${diffDays}`
            );
    });









// ADMIN
bot.hears(process.env.PASS, async (ctx)=>
{
    await ctx.reply("Hello, admin", await MainAdmin);
});
bot.hears("GetAllSponsors", async(ctx)=>
{
    const _sponsors = await SponsorModel.findAll();
    if (_sponsors !== null && _sponsors.length > 0)
    {
        for (let i = 0; i< _sponsors.length; i++)
        {
            await ctx.reply(
                `id:  ${_sponsors[i].id}\n`+
                `chatId:  ${_sponsors[i].chatId}\n`+
                `link:   ${_sponsors[i].link}\n`+
                `name:  ${_sponsors[i].name}`);
        }
    }
    else
    {
        await ctx.reply("No sponsors?");
    }
});
bot.hears("GetAllUsers", async (ctx)=>
{
    const _subscribers = await SubscriberModel.findAll();
    if (_subscribers === null || _subscribers.length === 0)
    {
        await ctx.reply("no users");
    }
    else
    {
        for (let i = 0; i< _subscribers.length; i++)
        {
            await ctx.reply(
                `User - ${_subscribers[i].chatId}\n` +
                `Passed - ${_subscribers[i].passed}\n` +
                `Referals - ${_subscribers[i].referals}\n` +
                `Referal - ${_subscribers[i].referal}\n` +
                `Tickets - ${_subscribers[i].tickets}\n`
                );
        }
    }
});
bot.hears("GetAllTickets", async ctx =>
{
    const _tickets = await TicketModel.findAll();
    if (_tickets === null || _tickets.length === 0)
    {
        await ctx.reply("no tickets");
    }
    else
    {
        for (let i = 0; i< _tickets.length; i++)
        {
            await ctx.reply(
                `User - ${_tickets[i].ownerChatId}\n` +
                `id - ${_tickets[i].id}\n`
                );
        }
    }
});
bot.hears("–†–∞—Å—Å—ã–ª–∫–∞", async (ctx) => 
{
    let check = await CheckAdmin(ctx.message.chat.id);
    if (check === true)
    {
        await ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ->");       
    }
});


bot.on('message', async ctx=>
{
   try
   {
       let com = ctx.message.text.split("|")[0];
       if (com == "Add")
       {
          let _link = ctx.message.text.split("|")[1];
          let _chatId = ctx.message.text.split("|")[2];
          let _name = ctx.message.text.split("|")[3];

          await ctx.reply(`${_link}    ${_chatId}     ${_name}`);
          await SponsorModel.create
          ({
               link : _link,
               chatId : _chatId, 
               name : _name
          });
       }
       if (com == "Del")
       {
          let _id = ctx.message.text.split("|")[1];
           
       }
   }
   catch(err)
   {
       console.log(err);
   }
   await ctx.reply("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É?");
});











async function CheckAdmin(chatId)
{
    for (let i = 0; i< adminChatId.length; i++)
    {
        if (adminChatId[i] == chatId)
        {
            return true;
        }
    }
    return false;
}

bot.launch();
process.once("SIGINT", ()=> bot.stop("SIGINT"));
process.once("SIGTERM", ()=> bot.stop("SIGTERM"));


