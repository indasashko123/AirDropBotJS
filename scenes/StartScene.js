const {Scenes, Markup} = require('telegraf');
const {SponsorModel, SubscriberModel, TicketModel} = require('../DataBase/Models/Models');
const {CheckButton, GetSponsors, MainBoard, StartButton,GetCaptcha } = require('../Keyboards/UserKeyboards');
const CheckSubscribing = require("../util/CheckSubscribing");
const {GetValues} = require("../util/Capcha");




class StartSceneGenerator 
{
    GetCreetingScene() 
    {
        const greating = new Scenes.BaseScene("greating");
        greating.enter(async (ctx)=>
        {
            try
            {
                await ctx.reply(
                    "–ü—Ä–∏–≤–µ—Ç, —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫üëãüèª\n\n "+
                    "–¢–µ–±–µ –≤—ã–ø–∞–ª —à–∞–Ω—Å! –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑ –¥–æ 15.000$ü§ë\n\n"+
                    "–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ - 5.000$\n"+
                    "–ò 999 —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤ –ø–æ–ª—É—á–∞—Ç CRYPTOBOX\n"+
                    "–û—Ç 1 –¥–æ 5.000$ üî• \n\n"+
                    "–ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–∏ –ª—ë–≥–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∞ –∏–º–µ–Ω–Ω–æ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —è –≤—ã–¥–∞–º —Ç–µ–±–µ —Å–ø–∏—Å–∫–æ–º.üìã"+
                    "–ó–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ, —Ç—ã –ø–æ–ª—É—á–∏—à—å 1 –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç üéü \n\n "+
                    "–ó–æ–≤–∏ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–∞–π –µ—â—ë 1 üéü\n\n"+
                    "–ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–±–µ–¥—É !üóΩ", StartButton);
            }
            catch(er)
            {
                console.log(er);
            }

        });
        greating.action("started", async (ctx)=>
        {
            await ctx.scene.enter("sponsorScene");
        });
        greating.on('message', async (ctx)=>
        {
            await ctx.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É - \"–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ\"");
        });
        return greating;
    }
    GetSponsorScene()
    {
        const sponsorScene = new Scenes.BaseScene("sponsorScene");
        sponsorScene.enter(async ctx=>
            {
                const _sponsors = await SponsorModel.findAll();
                await ctx.reply(
                "–ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É ?ü§© –¢–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø—É - –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è‚úÖ"
                    ,CheckButton);
                await ctx.reply("üëá", await GetSponsors(_sponsors)); 
            });
        sponsorScene.hears(CheckButton.reply_markup.keyboard[0][0], async ctx =>
            {
                await ctx.scene.enter("capchaScene");
            });
        sponsorScene.on('message', async (ctx)=>
            {
                await ctx.reply("–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ü–†–û–í–ï–†–ö–ê –∏ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É");
            });
        return sponsorScene;
    }
    GetCapchaScene()
    {
        const capchaScene = new Scenes.BaseScene("capchaScene");
        capchaScene.enter(async ctx=>
        {
            let capcha = await GetValues();
            await ctx.reply( `–ß—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —á–µ—Å—Ç–Ω–æ - –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É\n\n`+
            `–í—ã–±–∏—Ä–∏—Ç–µ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–∂–µ–Ω–æ : \n\n`+
            `                                  ${capcha.Symbols[capcha.answer]}${capcha.Names[capcha.answer]}${capcha.Symbols[capcha.answer]}\n`
            ,await GetCaptcha(capcha));
        });
        capchaScene.on('callback_query', async (ctx)=>
        {
            try
            {
                if (ctx.session.__scenes.state.answer === undefined)
                {
                   ctx.session.__scenes.state.answer = 0;
                }
                let messageId = ctx.update.callback_query.message.message_id;
                let data = ctx.update.callback_query.data;
                if (data.split("/")[0] === "0")
                {
                    await ctx.deleteMessage(messageId);
                    await ctx.scene.reenter();
                    ctx.session.__scenes.state.answer = 0;
                    return;
                }     
                let reply_markup = ctx.update.callback_query.message.reply_markup;
                reply_markup.inline_keyboard[data.split("/")[1]][data.split("/")[2]].text = "üëç";
                reply_markup.inline_keyboard[data.split("/")[1]][data.split("/")[2]].callback_data = `0/${data.split("/")[1]}/${data.split("/")[2]}`;
                await ctx.editMessageReplyMarkup(reply_markup);
                ctx.session.__scenes.state.answer += 1;
                if (ctx.session.__scenes.state.answer == 3)
                {
                    await ctx.deleteMessage(messageId);
                    await ctx.scene.enter("passScene");
                }
            }
            catch(e)
            {
                console.log(e);
                ctx.session.__scenes.state.answer = 0;
                let messageId = ctx.update.callback_query.message.message_id;
                try
                {
                    await ctx.deleteMessage(messageId);
                }
                catch(err)
                {
                    console.log(err);
                }
                await ctx.scene.reenter();
            }
            
        });
        capchaScene.hears("–ù–æ–≤–∞—è –∫–∞–ø—á–∞", async (ctx)=>
        {
            ctx.session.__scenes.state.answer = 0;
            await ctx.scene.reenter(); 
        });
        capchaScene.on('message', async (ctx)=>
        {
            ctx.session.__scenes.state.answer = 0;
            await ctx.reply("–Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É", Markup.keyboard(["–ù–æ–≤–∞—è –∫–∞–ø—á–∞"]).resize());
        });
        return capchaScene;
    }
    GetPassScene()
    {
        const passScene = new Scenes.BaseScene("passScene");
        passScene.enter(async ctx=>
        {
            let _chatId = ctx.callbackQuery.message.chat.id;
            let check = await CheckSubscribing(_chatId, ctx);
                if (check === true)
                {
                    const _subscriber = await SubscriberModel.findOne
                    ({
                        where:
                        {
                            chatId: _chatId
                        }
                    });
                    if (_subscriber.passed === false)
                    {
                        _subscriber.passed = true;
                        _subscriber.tickets ++;
                        await _subscriber.save();
                        await TicketModel.create
                        ({
                            ownerChatId : _subscriber.chatId
                        });
                        try
                        {
                            if (_subscriber.referal != 0)
                            {
                                const _referal = await SubscriberModel.findOne
                                ({
                                    where :
                                    {
                                        chatId : _subscriber.referal
                                    }
                                });
                                _referal.tickets++;
                                await _referal.save();
                                await TicketModel.create
                                ({
                                    ownerChatId : _referal.chatId
                                });
                            }
                        }
                        catch
                        {
        
                        }
                    }
                    await ctx.reply(
                        "ü§ë–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n"+
                        "üí∞–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 1 –±–∏–ª–µ—Ç üéü\n" +
                        "üó£ –ü–æ—Å–ø–µ—à–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π, —Ç–µ–º —Å–∞–º—ã–º —É–≤–µ–ª–∏—á–∏–≤–∞—è —Å–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É.\n\n" +
                        "‚ÑπÔ∏è–ë—é–¥–∂–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15.000$"
                        , MainBoard);
                    await ctx.scene.leave();    
                }
                else
                {
                   await ctx.reply("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n\n"+
                   " –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É");
                   await ctx.scene.enter("sponsorScene");
                } 
        });
        return passScene;
    }
}

module.exports = StartSceneGenerator;


                